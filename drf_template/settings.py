"""
Django settings for drf_template project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import logging
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from packages.env import os_get_env

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7r!@xba^!na!_go3s-)+7tsm@th+cj!w64o7(vxx$n26_yz25_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("APP_ENV") != "production"

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'repository'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'server.middlewares.logger.RequestLoggerMiddleware'
]

ROOT_URLCONF = 'drf_template.urls'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} (module: {module}; func_name: {funcName}; {message})',
            'style': '{',
        },
        'simple-request': {
            'format': "{levelname} (time: {asctime}; status_code:{status_code}; {message})",
            'style': '{',
        },

    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'log_file.log',
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file-request': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'log_file.log',
            'formatter': 'simple-request'
        },
        'console-request': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple-request'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['file-request', 'console-request'],
            'level': 'INFO',
            'propagate': False
        },
        'drf_template': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False
        }
    }
}

LOGGER_INSTANCE = logging.getLogger('drf_template')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'drf_template.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'USER': os_get_env('DB_USER', 'admin'),
        'PASSWORD': os_get_env('DB_USER', 'password'),
        'NAME': os_get_env('DB_NAME', 'backend'),
        'HOST': os_get_env('DB_HOST', 'localhost'),
        'PORT': os_get_env('DB_PORT', '5433'),
        'TEST': {
            'NAME': 'backend_test'
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

JWT = {
    'ALG': 'HS256',
    'KEY': os_get_env('JWT_KEY', 'key'),
    'EXP': 60,  # In Minutes
    'REFRESH_KEY': os_get_env('JWT_REFRESH_KEY', 'refresh_key')
}
